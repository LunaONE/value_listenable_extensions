import 'dart:io';

import 'package:code_builder/code_builder.dart' as cb;
import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';

Future<void> main() async {
  const comment = Code(
    '// Generated by `./generate_combine_latest.sh`\n'
    '//\n'
    '// DO NOT EDIT MANUALLY\n'
    '//\n',
  );

  final metaImport = Directive.import('package:meta/meta.dart');
  final foundation = Directive.import('package:flutter/foundation.dart');
  final packageImport = Directive.import(
      'package:value_listenable_extensions/value_listenable_extensions.dart');
  final wrappingValueListenable =
      Directive.import('./value_listenable_view.dart');

  var funcs = <Spec>[];
  for (var i = 2; i <= 20; i++) {
    final valueTypes = <String>[];
    final valueListenableNames = <String>[];
    final valueNames = <String>[];
    for (var x = 1; x <= i; x++) {
      valueTypes.add('T$x');
      valueListenableNames.add('vl$x');
      valueNames.add('v$x');
    }

    final combineLatestFunc = cb.Method((b) {
      b.annotations.add(const CodeExpression(Code('useResult')));
      b.name = 'combineLatest$i';

      b.requiredParameters.addAll([
        for (final (i, type) in valueTypes.indexed)
          Parameter((p) {
            p.name = valueListenableNames[i];
            p.type = refer('ValueListenable<$type>');
          }),
      ]);
      b.requiredParameters.add(
        Parameter((p) {
          p.name = 'combine';
          p.type = cb.FunctionType((f) {
            f.requiredParameters.addAll(
              [
                for (final (i, type) in valueTypes.indexed)
                  refer('$type ${valueNames[i]}'),
              ],
            );

            f.returnType = refer('U');
          });
        }),
      );

      b.types.addAll([...valueTypes.map(refer), refer('U')]);

      b.returns = refer('DisposableValueListenable<U>');
      b.body = Code(
        [
          'final combinedNotifier = ValueNotifier<U>(combine(${valueListenableNames.map((e) => '$e.value').join(',')},));\n\n',
          'void onChange() { combinedNotifier.value = combine(${valueListenableNames.map((e) => '$e.value').join(',')},); }\n\n',
          ...[
            for (final input in valueListenableNames)
              '$input.addListener(onChange);'
          ],
          '\n\n',
          'return ValueListenableView(',
          '  combinedNotifier,',
          '  dispose: () { combinedNotifier.dispose(); ${[
            for (final input in valueListenableNames)
              '$input.removeListener(onChange);'
          ].join()} },',
          ');',
        ].join(''),
      );
    });

    funcs.add(combineLatestFunc);
  }

  final emitter = DartEmitter(
    orderDirectives: true,
    useNullSafetySyntax: true,
  );

  final code = <Spec>[
    comment,
    foundation,
    metaImport,
    packageImport,
    wrappingValueListenable,
    ...funcs,
  ].map((e) => e.accept(emitter)).join('\n');

  final file = await File('./lib/src/combine_latest.dart')
      .open(mode: FileMode.writeOnly);

  await file.writeString(DartFormatter(pageWidth: 80).format(code));
}
